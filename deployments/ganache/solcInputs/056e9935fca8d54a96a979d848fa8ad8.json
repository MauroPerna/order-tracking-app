{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/App.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./utils/Queue.sol\";\nimport \"./utils/Dispatcher.sol\";\nimport \"./utils/Warehouse.sol\";\nimport \"./utils/Client.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract App is Ownable {\n    Queue public pendingOrdersQueue;\n    Queue public dispatchedOrdersQueue;\n    Warehouse private warehouse;\n    Dispatcher private dispatcher;\n    Client private client;\n    string[] private skus;\n\n    event OrderCreated(address client, bytes32 orderId);\n    event OrderCanceled(bytes32 orderId);\n    event OrderInPreration(bytes32 orderId);\n    event OrderPrepared(bytes32 orderId);\n    event OrderDeliver(bytes32 orderId);\n    event LogMessage(string message);\n\n    mapping(address => mapping(bytes32 => Order)) public clientToOrders;\n    mapping(bytes32 => address) orderIdToClientAddress;\n    mapping(bytes32 => Product[]) orderToProducts;\n    mapping(address => bytes32) public warehouserToOrderId;\n    mapping(address => bytes32) public dispatcherToOrderId;\n\n    enum OrderStatus {\n        PENDING,\n        CANCELED,\n        IN_PREPARATION,\n        PREPARED,\n        IN_TRANSIT,\n        DELIVERED,\n        VERIFIED\n    }\n\n    enum OrderVerification {\n        NOT_VERIFIED,\n        ERROR_IN_ORDER,\n        PACKAGING_PROBLEMS,\n        DAMAGED_PRODUCT\n    }\n\n    struct Product {\n        string sku;\n        uint8 quantity;\n    }\n\n    struct Order {\n        bytes32 orderId;\n        uint8 itemsQuantity;\n        OrderStatus orderStatus;\n        OrderVerification orderVerification;\n        string observations;\n        uint256 price;\n        bool exist;\n    }\n\n    constructor(string[] memory _skus) {\n        pendingOrdersQueue = new Queue();\n        dispatchedOrdersQueue = new Queue();\n        warehouse = new Warehouse();\n        dispatcher = new Dispatcher();\n        client = new Client();\n        skus = _skus;\n    }\n\n    // ================================== MODIFIERS ==================================\n\n    // Modifier to restrict access to only valid clients\n    modifier onlyClient() {\n        require(client.exist(msg.sender), \"You aren't a valid client\");\n        _;\n    }\n\n    // Modifier to restrict access to only valid warehouse workers\n    modifier onlyWarehouseWorker() {\n        require(\n            warehouse.exist(msg.sender),\n            \"You aren't a valid warehouse worker\"\n        );\n        _;\n    }\n\n    // Modifier to restrict access to only valid dispatcher workers\n    modifier onlyDispatcherWorker() {\n        require(\n            dispatcher.exist(msg.sender),\n            \"You aren't a valid dispatcher worker\"\n        );\n        _;\n    }\n\n    // ================================== PUBLIC FUNCTIONS ==================================\n\n    /**\n     *  @dev Function to create a new warehouse worker\n     *  @param _worker is the address of the worker\n     *  @param _name of the worker\n     */\n\n    function createWarehouseWorker(\n        address _worker,\n        string memory _name\n    ) public onlyOwner {\n        Warehouse.Worker memory newWarehouseWorker = Warehouse.Worker({\n            name: _name,\n            exist: true\n        });\n\n        warehouse.createWarehouseWorker(_worker, newWarehouseWorker);\n    }\n\n    /**\n     *  @dev Function to create a new dispatcher worker\n     *  @param _worker is the address of the worker\n     *  @param _name of the worker\n     */\n    function createDispatcherWorker(\n        address _worker,\n        string memory _name\n    ) public onlyOwner {\n        Dispatcher.Worker memory newDispatcherWorker = Dispatcher.Worker({\n            name: _name,\n            exist: true\n        });\n\n        dispatcher.createDispatcherWorker(_worker, newDispatcherWorker);\n    }\n\n    /**\n     * @dev Function to create a new client\n     * @param _clientAddress is the address of the client\n     * @param _name of the client\n     */\n    function createClient(address _clientAddress, string memory _name) public {\n        Client.ClientStruct memory newClient = Client.ClientStruct({\n            name: _name,\n            exist: true\n        });\n\n        client.createClient(_clientAddress, newClient);\n    }\n\n    /**\n     * @dev Function to get an Order\n     * @param orderId order's id\n     */\n    function getOrder(bytes32 orderId) public view returns (Order memory) {\n        return _getOrder(orderId);\n    }\n\n    // Client\n    /**\n     * @dev Function to create an Order\n     * @param quantities array with quantities of each product\n     */\n    function createOrder(uint8[] memory quantities) public payable onlyClient {\n        uint8 quantityItems;\n        bytes32 orderId = keccak256(\n            abi.encodePacked(msg.sender, block.timestamp)\n        );\n\n        clientToOrders[msg.sender][orderId] = Order({\n            orderId: orderId,\n            itemsQuantity: 0,\n            orderStatus: OrderStatus.PENDING,\n            orderVerification: OrderVerification.NOT_VERIFIED,\n            observations: \"\",\n            price: msg.value,\n            exist: true\n        });\n\n        for (uint8 i = 0; i < 5; i++) {\n            string memory sku = skus[i];\n            uint8 quantity = quantities[i];\n            _addProduct(orderId, sku, quantity);\n            quantityItems += quantity;\n        }\n\n        clientToOrders[msg.sender][orderId].itemsQuantity = quantityItems;\n\n        pendingOrdersQueue.enqueue(orderId);\n        orderIdToClientAddress[orderId] = msg.sender;\n        emit OrderCreated(msg.sender, orderId);\n    }\n\n    /**\n     * @dev Function to cancel an Order\n     * @param orderId order's id\n     */\n    function cancelOrder(bytes32 orderId) public onlyClient {\n        require(\n            clientToOrders[msg.sender][orderId].exist,\n            \"The order doesn't exist\"\n        );\n        require(\n            clientToOrders[msg.sender][orderId].orderStatus ==\n                OrderStatus.PENDING,\n            \"The order cann't be canceled\"\n        );\n\n        clientToOrders[msg.sender][orderId].orderStatus = OrderStatus.CANCELED;\n    }\n\n    /**\n     * @dev Function to get products from an order\n     * @param orderId order's id\n     */\n    function getProductsByClient(\n        bytes32 orderId\n    ) public view onlyClient returns (Product[5] memory products) {\n        return _getProducts(orderId, msg.sender);\n    }\n\n    /**\n     * @dev Function to confirm that an order has been received\n     * @param orderId order's id\n     */\n    function verifyOrder(bytes32 orderId) public onlyClient {\n        Order storage order = _getOrder(orderId);\n        order.orderStatus = OrderStatus.VERIFIED;\n        address payable ownerAddress = payable(owner());\n        ownerAddress.transfer(order.price);\n    }\n\n    /**\n     * @dev Function to notify the status in which an order was received\n     * @param orderId order's id\n     * @param reason reason for discrepancy\n     */\n    function markOrderAsReceivedWithDiscrepancy(\n        bytes32 orderId,\n        OrderVerification reason\n    ) public onlyClient {\n        require(\n            clientToOrders[msg.sender][orderId].exist,\n            \"The order doesn't exist\"\n        );\n        require(\n            clientToOrders[msg.sender][orderId].orderStatus ==\n                OrderStatus.DELIVERED,\n            \"The order must be in DELIVERED status to be marked as received with discrepancy\"\n        );\n        require(\n            reason >= OrderVerification.NOT_VERIFIED &&\n                reason <= OrderVerification.DAMAGED_PRODUCT,\n            \"Invalid reason. Please provide a valid input.\"\n        );\n\n        Order storage order = _getOrder(orderId);\n        order.orderVerification = reason;\n    }\n\n    // Warehouse Worker\n\n    /**\n     * @dev Function to add an order in preparation stage\n     */\n    function addOrderToPreparationStage() public onlyWarehouseWorker {\n        bool orderFound = false;\n        bytes32 orderId;\n\n        while (pendingOrdersQueue.getSize() > 0 && !orderFound) {\n            orderId = pendingOrdersQueue.dequeue();\n            if (\n                clientToOrders[msg.sender][orderId].orderStatus !=\n                OrderStatus.CANCELED\n            ) {\n                orderFound = true;\n            }\n        }\n\n        if (orderFound) {\n            Order storage order = _getOrder(orderId);\n            order.orderStatus = OrderStatus.IN_PREPARATION;\n            warehouserToOrderId[msg.sender] = orderId;\n        } else {\n            revert(\"No valid order found in client queue\");\n        }\n    }\n\n    /**\n     * @dev Function to move an order to deliver stagea\n     */\n    function moveOrderToDeliverStage() public onlyWarehouseWorker {\n        require(\n            warehouserToOrderId[msg.sender] != bytes32(0),\n            \"You don't have an assigned order\"\n        );\n        bytes32 orderId = warehouserToOrderId[msg.sender];\n        delete warehouserToOrderId[msg.sender];\n        Order storage order = _getOrder(orderId);\n        order.orderStatus = OrderStatus.PREPARED;\n        dispatchedOrdersQueue.enqueue(orderId);\n    }\n\n    /**\n     * @dev Function to take an order and dispatch it\n     */\n    function dispatchOrder() public onlyDispatcherWorker {\n        bytes32 orderId = dispatchedOrdersQueue.dequeue();\n        Order storage order = _getOrder(orderId);\n        order.orderStatus = OrderStatus.IN_TRANSIT;\n        dispatcherToOrderId[msg.sender] = orderId;\n    }\n\n    /**\n     * @dev Function to mark an order as delivered\n     */\n    function deliverOrder() public onlyDispatcherWorker {\n        require(\n            dispatcherToOrderId[msg.sender] != bytes32(0),\n            \"You don't have an assigned order\"\n        );\n        bytes32 orderId = dispatcherToOrderId[msg.sender];\n        delete dispatcherToOrderId[msg.sender];\n        Order storage order = _getOrder(orderId);\n        order.orderStatus = OrderStatus.DELIVERED;\n        emit OrderDeliver(orderId);\n    }\n\n    // ========================================== PRIVATE METHODS ==========================================\n\n    /**\n     * @dev Private function to get an instance of the order in the contract.\n     * @param _orderId order's id\n     */\n    function _getOrder(bytes32 _orderId) private view returns (Order storage) {\n        require(\n            orderIdToClientAddress[_orderId] != address(0),\n            \"The owner doesn't exist\"\n        );\n        address _ownerOfOrder = orderIdToClientAddress[_orderId];\n        require(\n            clientToOrders[_ownerOfOrder][_orderId].exist,\n            \"The order doesn't exist\"\n        );\n        return clientToOrders[_ownerOfOrder][_orderId];\n    }\n\n    /**\n     * @dev Private function to add products to an order\n     * @param _orderId order's id\n     * @param sku off-chain identifier of the product\n     * @param quantity of product\n     */\n    function _addProduct(\n        bytes32 _orderId,\n        string memory sku,\n        uint8 quantity\n    ) private {\n        Product memory newProduct = Product({sku: sku, quantity: quantity});\n        orderToProducts[_orderId].push(newProduct);\n    }\n\n    /**\n     * @dev Private function to get products from an order\n     * @param _orderId order's id\n     * @param _account address of the client who owns the order\n     */\n    function _getProducts(\n        bytes32 _orderId,\n        address _account\n    ) private view returns (Product[5] memory products) {\n        require(\n            clientToOrders[_account][_orderId].exist,\n            \"The order doesn't exist\"\n        );\n        Product[5] memory productsReturned;\n\n        for (uint8 i = 0; i < 5; ) {\n            string memory sku = orderToProducts[_orderId][i].sku;\n            uint8 quantity = orderToProducts[_orderId][i].quantity;\n\n            productsReturned[i] = Product({sku: sku, quantity: quantity});\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        return productsReturned;\n    }\n}\n"
    },
    "contracts/test/QueueTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../utils/Queue.sol\";\n\ncontract TestQueue is Queue {\n    function testEnqueue(bytes32 _orderId) public {\n        enqueue(_orderId);\n    }\n\n    function testDequeue() public returns (bytes32 orderId) {\n        return dequeue();\n    }\n}\n"
    },
    "contracts/utils/Client.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract Client {\n    constructor() {}\n\n    struct ClientStruct {\n        string name;\n        bool exist;\n    }\n\n    mapping(address => ClientStruct) public clients;\n\n    function createClient(\n        address clientAddress,\n        ClientStruct memory item\n    ) public {\n        clients[clientAddress] = item;\n    }\n\n    function exist(address _address) public view returns (bool) {\n        return clients[_address].exist;\n    }\n}\n"
    },
    "contracts/utils/Dispatcher.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract Dispatcher {\n    constructor() {}\n\n    struct Worker {\n        string name;\n        bool exist;\n    }\n\n    mapping(address => Worker) public dispatcherWorkers;\n\n    function createDispatcherWorker(\n        address _worker,\n        Worker memory item\n    ) public {\n        dispatcherWorkers[_worker] = item;\n    }\n\n    function exist(address _address) public view returns (bool) {\n        return dispatcherWorkers[_address].exist;\n    }\n}\n"
    },
    "contracts/utils/Queue.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract Queue is Ownable {\n    using SafeMath for uint256;\n\n    mapping(uint256 => bytes32) private queue;\n    uint256 private frontIndex;\n    uint256 private rearIndex;\n    uint256 private size;\n\n    constructor() {\n        frontIndex = 0;\n        rearIndex = 0;\n        size = 0;\n    }\n\n    function enqueue(bytes32 _orderId) public onlyOwner {\n        queue[rearIndex] = _orderId;\n        rearIndex = (rearIndex.add(1)).mod(type(uint256).max);\n        size = size.add(1);\n    }\n\n    function dequeue() public onlyOwner returns (bytes32 orderId) {\n        require(size > 0, \"Queue is empty\");\n        bytes32 item = queue[frontIndex];\n        delete queue[frontIndex];\n        frontIndex = (frontIndex.add(1)).mod(type(uint256).max);\n        size = size.sub(1);\n        return item;\n    }\n\n    function getSize() public view onlyOwner returns (uint256) {\n        return size;\n    }\n\n    function containsOrderId(bytes32 _orderId) public view returns (bool) {\n        for (uint256 i = 0; i < size; i++) {\n            uint256 index = (frontIndex.add(i)).mod(type(uint256).max);\n            if (queue[index] == _orderId) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"
    },
    "contracts/utils/Warehouse.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract Warehouse {\n    constructor() {}\n\n    struct Worker {\n        string name;\n        bool exist;\n    }\n\n    mapping(address => Worker) public warehouseStaff;\n\n    function createWarehouseWorker(address _worker, Worker memory item) public {\n        warehouseStaff[_worker] = item;\n    }\n\n    function exist(address _address) public view returns (bool) {\n        return warehouseStaff[_address].exist;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}